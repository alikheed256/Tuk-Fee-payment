// import express from 'express';
// import cors from 'cors';
// import mongoose from 'mongoose';
// import dotenv from 'dotenv';
// import bcrypt from 'bcrypt';


// dotenv.config();

// const app = express();
// app.use(cors());
// app.use(express.json());

// const mongoUrl = process.env.MONGO_URL || 'mongodb://localhost:27017/students-data';
// mongoose.connect(mongoUrl, {
//     useNewUrlParser: true,
//     useUnifiedTopology: true
// }).then(() => {
//     console.log("Database connected successfully");
// }).catch(err => {
//     console.log("MongoDB connection error:", err);
// });

// // Define the User schema and model
// const userSchema = new mongoose.Schema({
//     username: { type: String, required: true, unique: true },
//     email: { type: String, required: true, unique: true },
//     password: { type: String, required: true }
// });

// const User = mongoose.model('User', userSchema);




// // Sign-up endpoint
// app.post('/api/signup', async (req, res) => {
//     const { username, email, password } = req.body;

//     try {
//         const hashedPassword = await bcrypt.hash(password, 10);
//         const user = new User({ username, email, password: hashedPassword });
//         await user.save();
//         res.status(201).send('User created successfully');
//     } catch (error) {
//         if (error.code === 11000) {
//             res.status(400).send('Duplicate key error: user already exists');
//         } else {
//             res.status(500).send('Error creating user');
//         }
//     }
// });

// // Login endpoint
// app.post('/api/login', async (req, res) => {
//     const { username, password } = req.body;

//     try {
//         const user = await User.findOne({ username });
//         if (!user) {
//             return res.status(400).json({ error: 'Invalid ID or password' });
//         }

//         const isPasswordValid = await bcrypt.compare(password, user.password);
//         if (!isPasswordValid) {
//             return res.status(400).json({ error: 'Invalid ID or password' });
//         }

//         // Remove password before sending user details
//         const userDetails = { ...user._doc, password: undefined };

//         res.status(200).json(userDetails);
//     } catch (error) {
//         res.status(500).json({ error: 'Internal server error' });
//     }
// });

// // Listen on port 8000
// const port = process.env.PORT || 8000;
// app.listen(port, () => {
//     console.log(`Server running at  http://localhost:${port}`);
// });




const [showProfile, setShowProfile] = useState(false);
const { profile, logOut } = useAuth();
import { useAuth } from '../components/AuthContext';

  useEffect(() => {
    if (profile && profile.email) {
      // Fetch student data from backend
      axios.get(`http://localhost:3001/student/${profile.email}`)
        .then(response => {
          const { studentName, admissionNumber, feeBalance } = response.data;
          setStudentName(studentName);
          setAdmissionNumber(admissionNumber);
          // Assuming you have a fee-statement endpoint that uses admissionNumber
          axios.get(`http://localhost:3001/fee-statement/${admissionNumber}`)
            .then(response => setFeeStatement(response.data))
            .catch(error => console.error('Error fetching fee statement:', error));
        })
        .catch(error => {
          setError('Error fetching student data');
          setShowError(true);
          console.error('Error fetching student data:', error);
        });
    }
  }, [profile]);

  function handleProfileToggle() {
    setShowProfile(!showProfile);
  }






 {profile && (
            <div className='profile-container'>
              <img
                onClick={handleProfileToggle}
                src={profile.picture}
                alt="profile"
                className="profile-picture"
              />
              {showProfile && (
                <div className="profile-dropdown">
                  <p className='profile-content'>{profile.name}</p>
                  <p className='profile-content'>{profile.email}</p>
                  <hr />
                  <button className='logout-button' onClick={logOut}>Logout</button>
                </div>
              )}
            </div>
          )}